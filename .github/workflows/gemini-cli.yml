name: Gemini CLI

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  gemini-cli:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage') && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage') && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini-cli') && !contains(github.event.review.body, '/review') && !contains(github.event.review.body, '/triage') && (github.event.review.author_association == 'OWNER' || github.event.review.author_association == 'MEMBER' || github.event.review.author_association == 'COLLABORATOR')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@gemini-cli') && !contains(github.event.issue.body, '/review') && !contains(github.event.issue.body, '/triage') && (github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR'))
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Get PR branch
        if: github.event.issue.pull_request || github.event_name == 'pull_request_review' || github.event_name == 'pull_request_review_comment'
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName --repo "$REPOSITORY")
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR code
        if: github.event.issue.pull_request || github.event_name == 'pull_request_review' || github.event_name == 'pull_request_review_comment'
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.get_pr_branch.outputs.name }}
          fetch-depth: 0

      - name: Get Issue/PR details
        id: get_details
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if [[ -n "${{ github.event.issue.pull_request }}" || "${{ github.event_name }}" == "pull_request_review" || "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "is_pr=true" >> "$GITHUB_OUTPUT"
            if [[ -n "${{ github.event.issue.number }}" ]]; then
              echo "number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
            else
              echo "number=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "is_pr=false" >> "$GITHUB_OUTPUT"
            echo "number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Set user request
        id: set_user_request
        run: |
          REQUEST_BODY=""
          if [[ -n "${{ github.event.comment.body }}" ]]; then
            REQUEST_BODY="${{ github.event.comment.body }}"
          elif [[ -n "${{ github.event.review.body }}" ]]; then
            REQUEST_BODY="${{ github.event.review.body }}"
          elif [[ -n "${{ github.event.issue.body }}" ]]; then
            REQUEST_BODY="${{ github.event.issue.body }}"
          fi
          echo "request<<EOF" >> $GITHUB_ENV
          echo "$REQUEST_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Acknowledge request
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          IS_PR: ${{ steps.get_details.outputs.is_pr }}
          NUMBER: ${{ steps.get_details.outputs.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          BODY="I've received your request and I'm working on it now! ðŸ¤–"
          if [[ "$IS_PR" == "true" ]]; then
            gh pr comment $NUMBER --body "$BODY" --repo $REPOSITORY
          else
            gh issue comment $NUMBER --body "$BODY" --repo $REPOSITORY
          fi

      - name: Run Gemini
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{ env.request }}
          PR_NUMBER: ${{ steps.get_details.outputs.is_pr == 'true' && steps.get_details.outputs.number || '' }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          gcp_workload_identity_provider: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          gcp_project_id: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          gcp_service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(gh issue comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            IMPORTANT: Use the available shell commands to gather information if needed. Do not ask for information to be
            provided.
            Start by running these commands to gather the required data:
              1. Run: echo "$USER_REQUEST" to get the user request
              2. Run: echo "$REPOSITORY to get the repository
              3. Run: echo "$PR_NUMBER" to get the PR number (if applicable)
              3. For any specific files, use: cat filename, head -50 filename, or tail -50 filename
            Answer the $USER_REQUEST;
            Once you are ready to provide a response, follow the steps bellow to do so:
            1. If you have made any modifications to files, add them using 'git add .' IMPORTANT: do not add response.md file.
            2. Commit the changes with a descriptive message using 'git commit -m "your commit message"'.
            3. Push the changes to the branch using 'git push'.
            4. Writing your response to a file: write_file("response.md", "<your response here>")
            5. Posting the response: gh pr comment $PR_NUMBER --body-file response.md --repo $REPOSITORY
